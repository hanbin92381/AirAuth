<template>
  <!-- template里只能有一个根节点 -->
  <div class="auth-page">
    <div class="container">
      <camera id="camera" class="camera" deviceposition="front" flash="off" onerror="handlerError"></camera>
      <input type="button" value="R" class="btn" onclick="upload_face"></input>
    </div>
  </div>
</template>

<script>
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
/* eslint-disable no-undef */
import prompt from '@system.prompt'
import router from '@system.router'
import reguest from '@system.request'
import image from '@system.image'
import file from '@system.file'

let ws = null
let isOpen = false

export default {
  public: {
    response_type: '',
    client_id: '',
    redirect_uri: '',
    scope: '',
    state: '',
    pictureUrl: '',
    message: '',
  },
  onInit() {
    this.$page.setTitleBar({ text: '面部认证' })
  },
  takePhoto() {
    let _this = this

    this.$element('camera').takePhoto({
      // 通过quality参数设置照片质量
      quality: _this.photoQuality,
      success(data) {
        // 获取回调中的照片地址
        _this.pictureUrl = data.uri
        console.info('compressimg before' + data.uri)
        
        // image.compressImage({
        //   uri: data.uri,
        //   radio: 2, // 变为原图的1/2大小
        //   format: 'JPEG',
        //   success: function (data) {
        //     console.info('compressimg' + data.uri)
        //     file.readArrayBuffer({
        //       uri: data.uri,
        //       success: function (temp) {
        //         console.log('base64===' + arrayBufferToBase64(temp.buffer))
        //         //var strBase64 = arrayBufferToBase64(temp.buffer)
        //         _this.visible = '0'
        //       },
        //       fail: function (data, code) {
        //         console.info('base64=== error')
        //         _this.visible = '0'
        //       }
        //     })
        //   },
        //   fail: function (data, code) {
        //     console.info(`handling fail, code = ${code}`)
        //     _this.visible = '0'
        //   }
        // })
      },
      fail(data, code) {
        _this.visible = '0'
        console.info('take photos failed：code' + code.code)
      },
      complete() {
        console.info('complete')
      }
    })

    function arrayBufferToBase64(raw) {
      var base64 = ''
      var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
      var bytes = new Uint8Array(raw)
      var byteLength = bytes.byteLength
      var byteRemainder = byteLength % 3
      var mainLength = byteLength - byteRemainder
      var a, b, c, d
      var chunk
      // Main loop deals with bytes in chunks of 3
      for (var i = 0; i < mainLength; i = i + 3) {
        // Combine the three bytes into a single integer
        chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]
        // Use bitmasks to extract 6-bit segments from the triplet
        a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18
        b = (chunk & 258048) >> 12 // 258048 = (2^6 - 1) << 12
        c = (chunk & 4032) >> 6 // 4032 = (2^6 - 1) << 6
        d = chunk & 63 // 63 = 2^6 - 1
        // Convert the raw binary segments to the appropriate ASCII encoding
        base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]
      }
      // Deal with the remaining bytes and padding
      if (byteRemainder == 1) {
        chunk = bytes[mainLength]
        a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2;
        // Set the 4 least significant bits to zero
        b = (chunk & 3) << 4 // 3 = 2^2 - 1;
        base64 += encodings[a] + encodings[b] + '=='
      }
      else if (byteRemainder == 2) {
        chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]
        a = (chunk & 16128) >> 8 // 16128 = (2^6 - 1) << 8;
        b = (chunk & 1008) >> 4 // 1008 = (2^6 - 1) << 4;
        // Set the 2 least significant bits to zero
        c = (chunk & 15) << 2 // 15 = 2^4 - 1;
        base64 += encodings[a] + encodings[b] + encodings[c] + '='
      }
      // return 'data:image/jpeg;base64' + base64
      return base64
    }
  },
  upload_face() {
    this.takePhoto()
    reguest.upload({
      url: 'http://geecat.cn:443/oauth/do_login',
      method: 'POST',
      files: [
        {
          //uri: '/Common/img/heck.jpg',
          uri: this.pictureUrl,
          filename: 'img'
        }
      ],
      data: [
        {
          name: 'param1',
          value: 'value1',
          response_type: this.response_type,
          client_id: this.client_id,
          redirect_uri: this.redirect_uri,
          scope: this.scope,
          state: this.state,
        }
      ],
      success: function (data) {
        console.log('handling success')
        prompt.showToast({
          message: 'handling success',
          duration: 0
        })
      },
      fail: function (data, code) {
        console.log(`handling fail, res : ${data}, code = ${code}`)
        prompt.showToast({
          message: 'handling fail',
          duration: 1
        })
      }
    })
    //this.send()
    setTimeout()
    router.push({
      uri: '/AuthResult',
    })
  },
  create() {
    ws = websocketfactory.create({
      url: '23.99.190.56:6381',
      header: {
        'content-type': 'application/json'
      },
      protocols: ['protocol']
    })
    ws.onopen = function () {
      isOpen = true
      prompt.showToast({
        message: 'connect open'
      })
    }
    ws.onmessage = function (data) {
      prompt.showToast({
        message: `message is ${data.data}`
      })
    }
    ws.onerror = function () {
      prompt.showToast({
        message: 'error'
      })
    }
    ws.onclose = function (data) {
      prompt.showToast({
        message: 'onclose:data.code = ' + data.code + ', data.reason = ' + data.reason + ', data.wasClean = ' + data.wasClean
      })
    }
  },
  handleChange(e) {
    this.message = e.value
  },
  send() {
    isOpen && ws.send({
      data: this.message,
      success: function () {
        prompt.showToast({
          message: 'send success'
        })
      },
      fail: function () {
        prompt.showToast({
          message: 'send fail'
        })
      }
    })
  },
  close() {
    isOpen && ws.close({
      success: function () {
        isOpen = false
        prompt.showToast({
          message: 'close success'
        })
      },
      fail: function () {
        prompt.showToast({
          message: 'close fail'
        })
      }
    })
  }
}
</script>

<style>
.auth-page {
  flex-direction: column;
  align-items: center;
}
.container {
  flex-direction: column;
  align-items: center;
  padding-top: 200px;
}
.camera {
  position: fixed;
  height: 100%;
  width: 100%;
}
.btn {
  opacity: 0.7;
  font-size: 100px;
  position: fixed;
  right: 50px;
  bottom: 60px;
  height: 150px;
  border-radius: 100px;
  width: 150px;
  background-color: #0880d7;
  border-color: #0880d7;
  color: #f8f8ff;
}
.text1 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 195px;
  left: 20px;
}
.text2 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 160px;
  left: 20px;
}
.text3 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 125px;
  left: 20px;
}
.text4 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 90px;
  left: 20px;
}
.text5 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 55px;
  left: 20px;
}
.text6 {
  opacity: 0.9;
  font-family: Arial;
  font-weight: bolder;
  position: fixed;
  font-size: 30px;
  color: #6495ed;
  bottom: 20px;
  left: 20px;
}
</style>